<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>4SureERP Executive Dashboard</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-color: black;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    #globeViz {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 0;
    }

    #clock {
      position: absolute;
      top: 20px;
      right: 20px;
      width: 160px;
      height: 160px;
      z-index: 3;
    }

    .tick {
      stroke: cyan;
      stroke-width: 2;
      filter: drop-shadow(0 0 2px cyan);
    }

    .hour-hand {
      stroke: white;
      stroke-width: 5;
      stroke-linecap: round;
    }

    .minute-hand {
      stroke: cyan;
      stroke-width: 3;
      stroke-linecap: round;
    }

    .second-hand {
      stroke: deeppink;
      stroke-width: 2;
      stroke-linecap: round;
    }

    .glow {
      filter: drop-shadow(0 0 8px cyan);
    }

    .menu {
      position: absolute;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      z-index: 3;
    }

    .menu button {
      background-color: black;
      border: 2px solid cyan;
      color: cyan;
      padding: 10px 18px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
      box-shadow: 0 0 8px cyan;
      transition: all 0.3s ease;
    }

    .menu button:hover {
      background-color: cyan;
      color: black;
      transform: scale(1.1);
    }
  </style>
</head>
<body>
  <!-- 🌐 Spinning Globe -->
  <div id="globeViz"></div>

  <!-- ⏰ Clock -->
  <svg id="clock" viewBox="0 0 200 200">
    <g class="tick-marks"></g>
    <line class="hour-hand" x1="100" y1="100" x2="100" y2="60" />
    <line class="minute-hand" x1="100" y1="100" x2="100" y2="40" />
    <line class="second-hand" x1="100" y1="100" x2="100" y2="30" />
    <circle cx="100" cy="100" r="95" stroke="cyan" stroke-width="5" fill="none" class="glow"/>
  </svg>

  <!-- 💠 Menu Buttons -->
  <div class="menu">
    <button id="btn-sales">Sales</button>
    <button id="btn-accounting">Accounting</button>
    <button id="btn-operations">Operations</button>
    <button id="btn-recruitment">Recruitment</button>
    <button id="btn-reports">Reports</button>
    <button id="btn-settings">Settings</button>
  </div>

  <!-- 🌍 Globe & Clouds Script -->
  <script src="https://unpkg.com/three@0.152.2/build/three.min.js"></script>
  <script src="https://unpkg.com/globe.gl"></script>
  <script>
    const world = Globe()
      (document.getElementById('globeViz'))
      .globeImageUrl('//unpkg.com/three-globe/example/img/earth-dark.jpg')
      .bumpImageUrl('//unpkg.com/three-globe/example/img/earth-topology.png')
      .backgroundColor('rgba(0,0,0,0)')
      .showGraticules(true)
      .showAtmosphere(true)
      .atmosphereColor('cyan')
      .atmosphereAltitude(0.15);

    // ☁️ Transparent Cloud Layer
    const loader = new THREE.TextureLoader();
    loader.load('//unpkg.com/three-globe/example/img/clouds.png', texture => {
      const cloudGeometry = new THREE.SphereGeometry(100.5, 75, 75);
      const cloudMaterial = new THREE.MeshPhongMaterial({
        map: texture,
        transparent: true,
        opacity: 0.3,
        depthWrite: false
      });
      const cloudMesh = new THREE.Mesh(cloudGeometry, cloudMaterial);
      world.scene().add(cloudMesh);
    });

    // 🌀 Auto-Rotate Globe
    world.controls().autoRotate = true;
    world.controls().autoRotateSpeed = 0.5;

    (function animate() {
      requestAnimationFrame(animate);
      world.controls().update();
    })();
  </script>

  <!-- ⏰ Clock Script -->
  <script>
    const tickGroup = document.querySelector(".tick-marks");
    for (let i = 0; i < 12; i++) {
      const angle = (i * 30) * (Math.PI / 180);
      const x1 = 100 + 85 * Math.cos(angle);
      const y1 = 100 + 85 * Math.sin(angle);
      const x2 = 100 + 90 * Math.cos(angle);
      const y2 = 100 + 90 * Math.sin(angle);
      const tick = document.createElementNS("http://www.w3.org/2000/svg", "line");
      tick.setAttribute("x1", x1);
      tick.setAttribute("y1", y1);
      tick.setAttribute("x2", x2);
      tick.setAttribute("y2", y2);
      tick.setAttribute("class", "tick");
      tickGroup.appendChild(tick);
    }

    const hourHand = document.querySelector(".hour-hand");
    const minuteHand = document.querySelector(".minute-hand");
    const secondHand = document.querySelector(".second-hand");

    function updateClock() {
      const now = new Date();
      const seconds = now.getSeconds();
      const minutes = now.getMinutes();
      const hours = now.getHours();
      const secDeg = seconds * 6;
      const minDeg = minutes * 6 + seconds * 0.1;
      const hrDeg = (hours % 12) * 30 + minutes * 0.5;

      secondHand.setAttribute("transform", `rotate(${secDeg} 100 100)`);
      minuteHand.setAttribute("transform", `rotate(${minDeg} 100 100)`);
      hourHand.setAttribute("transform", `rotate(${hrDeg} 100 100)`);
    }

    setInterval(updateClock, 1000);
    updateClock();
  </script>
  <script src="/static/js/menu-links.js"></script>
</body>
</html>
